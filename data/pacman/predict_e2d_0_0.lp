#program base.
%--------------------------------------------------
% Generated by Pacman.py
%--------------------------------------------------
% 
% Time 1:
% wwwwwww
% w.....w
% w.p.o.w
% w..g..w
% wwwwwww
% down
% 
% Time 2:
% wwwwwww
% w.....w
% w...o.w
% w.p...w
% wwwwwww
% noop
% 

% The given sequence
senses(s2(c_pacman_at, obj_pacman, obj_cell_3_3), 1).
senses(s2(c_pellet_at, obj_pellet_1, obj_cell_5_3), 1).
senses(s2(c_ghost_at, obj_ghost_1, obj_cell_4_4), 1).
senses(s2(c_pacman_at, obj_pacman, obj_cell_3_4), 2).
senses(s2(c_pellet_at, obj_pellet_1, obj_cell_5_3), 2).
senses(s2(c_ghost_at, obj_ghost_1, obj_cell_3_4), 2).

% Exogenous actions
exogenous(s(c_down, obj_pacman), 1).
exogenous(s(c_noop, obj_pacman), 2).

% Elements
is_object(obj_pacman).
is_object(obj_pellet_1).
is_object(obj_ghost_1).
is_object(obj_cell_1_1).
is_object(obj_cell_1_2).
is_object(obj_cell_1_3).
is_object(obj_cell_1_4).
is_object(obj_cell_1_5).
is_object(obj_cell_2_1).
is_object(obj_cell_2_2).
is_object(obj_cell_2_3).
is_object(obj_cell_2_4).
is_object(obj_cell_2_5).
is_object(obj_cell_3_1).
is_object(obj_cell_3_2).
is_object(obj_cell_3_3).
is_object(obj_cell_3_4).
is_object(obj_cell_3_5).
is_object(obj_cell_4_1).
is_object(obj_cell_4_2).
is_object(obj_cell_4_3).
is_object(obj_cell_4_4).
is_object(obj_cell_4_5).
is_object(obj_cell_5_1).
is_object(obj_cell_5_2).
is_object(obj_cell_5_3).
is_object(obj_cell_5_4).
is_object(obj_cell_5_5).
is_object(obj_cell_6_1).
is_object(obj_cell_6_2).
is_object(obj_cell_6_3).
is_object(obj_cell_6_4).
is_object(obj_cell_6_5).
is_object(obj_cell_7_1).
is_object(obj_cell_7_2).
is_object(obj_cell_7_3).
is_object(obj_cell_7_4).
is_object(obj_cell_7_5).
is_cell(obj_cell_1_1).
is_cell(obj_cell_1_2).
is_cell(obj_cell_1_3).
is_cell(obj_cell_1_4).
is_cell(obj_cell_1_5).
is_cell(obj_cell_2_1).
is_cell(obj_cell_2_2).
is_cell(obj_cell_2_3).
is_cell(obj_cell_2_4).
is_cell(obj_cell_2_5).
is_cell(obj_cell_3_1).
is_cell(obj_cell_3_2).
is_cell(obj_cell_3_3).
is_cell(obj_cell_3_4).
is_cell(obj_cell_3_5).
is_cell(obj_cell_4_1).
is_cell(obj_cell_4_2).
is_cell(obj_cell_4_3).
is_cell(obj_cell_4_4).
is_cell(obj_cell_4_5).
is_cell(obj_cell_5_1).
is_cell(obj_cell_5_2).
is_cell(obj_cell_5_3).
is_cell(obj_cell_5_4).
is_cell(obj_cell_5_5).
is_cell(obj_cell_6_1).
is_cell(obj_cell_6_2).
is_cell(obj_cell_6_3).
is_cell(obj_cell_6_4).
is_cell(obj_cell_6_5).
is_cell(obj_cell_7_1).
is_cell(obj_cell_7_2).
is_cell(obj_cell_7_3).
is_cell(obj_cell_7_4).
is_cell(obj_cell_7_5).

% Concepts
is_concept(pacman_at).
is_concept(pellet_at).
is_concept(ghost_at).
is_concept(noop).
is_concept(left).
is_concept(right).
is_concept(up).
is_concept(down).

% Actions
is_exogenous(c_noop).
is_exogenous(c_left).
is_exogenous(c_right).
is_exogenous(c_up).
is_exogenous(c_down).

% Cell adjacency
permanent(isa2(p_right, obj_cell_1_1, obj_cell_2_1)).
permanent(isa2(p_right, obj_cell_2_1, obj_cell_3_1)).
permanent(isa2(p_right, obj_cell_3_1, obj_cell_4_1)).
permanent(isa2(p_right, obj_cell_4_1, obj_cell_5_1)).
permanent(isa2(p_right, obj_cell_5_1, obj_cell_6_1)).
permanent(isa2(p_right, obj_cell_6_1, obj_cell_7_1)).
permanent(isa2(p_right, obj_cell_1_2, obj_cell_2_2)).
permanent(isa2(p_right, obj_cell_2_2, obj_cell_3_2)).
permanent(isa2(p_right, obj_cell_3_2, obj_cell_4_2)).
permanent(isa2(p_right, obj_cell_4_2, obj_cell_5_2)).
permanent(isa2(p_right, obj_cell_5_2, obj_cell_6_2)).
permanent(isa2(p_right, obj_cell_6_2, obj_cell_7_2)).
permanent(isa2(p_right, obj_cell_1_3, obj_cell_2_3)).
permanent(isa2(p_right, obj_cell_2_3, obj_cell_3_3)).
permanent(isa2(p_right, obj_cell_3_3, obj_cell_4_3)).
permanent(isa2(p_right, obj_cell_4_3, obj_cell_5_3)).
permanent(isa2(p_right, obj_cell_5_3, obj_cell_6_3)).
permanent(isa2(p_right, obj_cell_6_3, obj_cell_7_3)).
permanent(isa2(p_right, obj_cell_1_4, obj_cell_2_4)).
permanent(isa2(p_right, obj_cell_2_4, obj_cell_3_4)).
permanent(isa2(p_right, obj_cell_3_4, obj_cell_4_4)).
permanent(isa2(p_right, obj_cell_4_4, obj_cell_5_4)).
permanent(isa2(p_right, obj_cell_5_4, obj_cell_6_4)).
permanent(isa2(p_right, obj_cell_6_4, obj_cell_7_4)).
permanent(isa2(p_right, obj_cell_1_5, obj_cell_2_5)).
permanent(isa2(p_right, obj_cell_2_5, obj_cell_3_5)).
permanent(isa2(p_right, obj_cell_3_5, obj_cell_4_5)).
permanent(isa2(p_right, obj_cell_4_5, obj_cell_5_5)).
permanent(isa2(p_right, obj_cell_5_5, obj_cell_6_5)).
permanent(isa2(p_right, obj_cell_6_5, obj_cell_7_5)).
permanent(isa2(p_below, obj_cell_1_1, obj_cell_1_2)).
permanent(isa2(p_below, obj_cell_1_2, obj_cell_1_3)).
permanent(isa2(p_below, obj_cell_1_3, obj_cell_1_4)).
permanent(isa2(p_below, obj_cell_1_4, obj_cell_1_5)).
permanent(isa2(p_below, obj_cell_2_1, obj_cell_2_2)).
permanent(isa2(p_below, obj_cell_2_2, obj_cell_2_3)).
permanent(isa2(p_below, obj_cell_2_3, obj_cell_2_4)).
permanent(isa2(p_below, obj_cell_2_4, obj_cell_2_5)).
permanent(isa2(p_below, obj_cell_3_1, obj_cell_3_2)).
permanent(isa2(p_below, obj_cell_3_2, obj_cell_3_3)).
permanent(isa2(p_below, obj_cell_3_3, obj_cell_3_4)).
permanent(isa2(p_below, obj_cell_3_4, obj_cell_3_5)).
permanent(isa2(p_below, obj_cell_4_1, obj_cell_4_2)).
permanent(isa2(p_below, obj_cell_4_2, obj_cell_4_3)).
permanent(isa2(p_below, obj_cell_4_3, obj_cell_4_4)).
permanent(isa2(p_below, obj_cell_4_4, obj_cell_4_5)).
permanent(isa2(p_below, obj_cell_5_1, obj_cell_5_2)).
permanent(isa2(p_below, obj_cell_5_2, obj_cell_5_3)).
permanent(isa2(p_below, obj_cell_5_3, obj_cell_5_4)).
permanent(isa2(p_below, obj_cell_5_4, obj_cell_5_5)).
permanent(isa2(p_below, obj_cell_6_1, obj_cell_6_2)).
permanent(isa2(p_below, obj_cell_6_2, obj_cell_6_3)).
permanent(isa2(p_below, obj_cell_6_3, obj_cell_6_4)).
permanent(isa2(p_below, obj_cell_6_4, obj_cell_6_5)).
permanent(isa2(p_below, obj_cell_7_1, obj_cell_7_2)).
permanent(isa2(p_below, obj_cell_7_2, obj_cell_7_3)).
permanent(isa2(p_below, obj_cell_7_3, obj_cell_7_4)).
permanent(isa2(p_below, obj_cell_7_4, obj_cell_7_5)).

% Walls
permanent(isa(p_is_wall, obj_cell_1_1)).
permanent(isa(p_is_wall, obj_cell_1_2)).
permanent(isa(p_is_wall, obj_cell_1_3)).
permanent(isa(p_is_wall, obj_cell_1_4)).
permanent(isa(p_is_wall, obj_cell_1_5)).
permanent(isa(p_is_wall, obj_cell_2_1)).
permanent(isa(p_is_not_wall, obj_cell_2_2)).
permanent(isa(p_is_not_wall, obj_cell_2_3)).
permanent(isa(p_is_not_wall, obj_cell_2_4)).
permanent(isa(p_is_wall, obj_cell_2_5)).
permanent(isa(p_is_wall, obj_cell_3_1)).
permanent(isa(p_is_not_wall, obj_cell_3_2)).
permanent(isa(p_is_not_wall, obj_cell_3_3)).
permanent(isa(p_is_not_wall, obj_cell_3_4)).
permanent(isa(p_is_wall, obj_cell_3_5)).
permanent(isa(p_is_wall, obj_cell_4_1)).
permanent(isa(p_is_not_wall, obj_cell_4_2)).
permanent(isa(p_is_not_wall, obj_cell_4_3)).
permanent(isa(p_is_not_wall, obj_cell_4_4)).
permanent(isa(p_is_wall, obj_cell_4_5)).
permanent(isa(p_is_wall, obj_cell_5_1)).
permanent(isa(p_is_not_wall, obj_cell_5_2)).
permanent(isa(p_is_not_wall, obj_cell_5_3)).
permanent(isa(p_is_not_wall, obj_cell_5_4)).
permanent(isa(p_is_wall, obj_cell_5_5)).
permanent(isa(p_is_wall, obj_cell_6_1)).
permanent(isa(p_is_not_wall, obj_cell_6_2)).
permanent(isa(p_is_not_wall, obj_cell_6_3)).
permanent(isa(p_is_not_wall, obj_cell_6_4)).
permanent(isa(p_is_wall, obj_cell_6_5)).
permanent(isa(p_is_wall, obj_cell_7_1)).
permanent(isa(p_is_wall, obj_cell_7_2)).
permanent(isa(p_is_wall, obj_cell_7_3)).
permanent(isa(p_is_wall, obj_cell_7_4)).
permanent(isa(p_is_wall, obj_cell_7_5)).
#program step(t).
% ∃! clause for c_pacman_at : at most one
:-
	holds(s2(c_pacman_at, X, Y), t),
	holds(s2(c_pacman_at, X, Y2), t),
	Y != Y2.

% ∃! clause for c_pacman_at : at least one
:-
	permanent(isa(t_pacman, X)),
	is_time(t),
	not aux_c_pacman_at(X, t).

aux_c_pacman_at(X, t) :-
	holds(s2(c_pacman_at, X, _), t).

% Incompossibility for c_pacman_at
incompossible(s2(c_pacman_at, X, Y), s2(c_pacman_at, X, Y2)) :-
	permanent(isa(t_pacman, X)),
	permanent(isa(t_cell, Y)),
	permanent(isa(t_cell, Y2)),
	Y != Y2.

% ∃! clause for c_pellet_at : at most one
:-
	holds(s2(c_pellet_at, X, Y), t),
	holds(s2(c_pellet_at, X, Y2), t),
	Y != Y2.

% ∃! clause for c_pellet_at : at least one
:-
	permanent(isa(t_pellet, X)),
	is_time(t),
	not aux_c_pellet_at(X, t).

aux_c_pellet_at(X, t) :-
	holds(s2(c_pellet_at, X, _), t).

% Incompossibility for c_pellet_at
incompossible(s2(c_pellet_at, X, Y), s2(c_pellet_at, X, Y2)) :-
	permanent(isa(t_pellet, X)),
	permanent(isa(t_cell, Y)),
	permanent(isa(t_cell, Y2)),
	Y != Y2.

% ∃! clause for c_ghost_at : at most one
:-
	holds(s2(c_ghost_at, X, Y), t),
	holds(s2(c_ghost_at, X, Y2), t),
	Y != Y2.

% ∃! clause for c_ghost_at : at least one
:-
	permanent(isa(t_ghost, X)),
	is_time(t),
	not aux_c_ghost_at(X, t).

aux_c_ghost_at(X, t) :-
	holds(s2(c_ghost_at, X, _), t).

% Incompossibility for c_ghost_at
incompossible(s2(c_ghost_at, X, Y), s2(c_ghost_at, X, Y2)) :-
	permanent(isa(t_ghost, X)),
	permanent(isa(t_cell, Y)),
	permanent(isa(t_cell, Y2)),
	Y != Y2.

% Exclusions
% Every action is either noop, up, down, left, or right
% ∀X : pacman, noop(X) ⊕ up(X) ⊕ down(X) ⊕ left(X) ⊕ right(X)

% At most one
:-
	holds(s(c_noop, X), t),
	holds(s(c_left, X), t).
:-
	holds(s(c_noop, X), t),
	holds(s(c_right, X), t).
:-
	holds(s(c_noop, X), t),
	holds(s(c_up, X), t).
:-
	holds(s(c_noop, X), t),
	holds(s(c_down, X), t).
:-
	holds(s(c_left, X), t),
	holds(s(c_right, X), t).
:-
	holds(s(c_left, X), t),
	holds(s(c_up, X), t).
:-
	holds(s(c_left, X), t),
	holds(s(c_down, X), t).
:-
	holds(s(c_right, X), t),
	holds(s(c_up, X), t).
:-
	holds(s(c_right, X), t),
	holds(s(c_down, X), t).
:-
	holds(s(c_up, X), t),
	holds(s(c_down, X), t).

% At least one
:-
	permanent(isa(t_pacman, X)),
	is_time(t),
	not holds(s(c_noop, X), t),
	not holds(s(c_left, X), t),
	not holds(s(c_right, X), t),
	not holds(s(c_up, X), t),
	not holds(s(c_down, X), t).

#program base.
% Incompossibility
incompossible(s(c_noop, X), s(c_left, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_noop, X), s(c_right, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_noop, X), s(c_up, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_noop, X), s(c_down, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_left, X), s(c_right, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_left, X), s(c_up, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_left, X), s(c_down, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_right, X), s(c_up, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_right, X), s(c_down, X)) :-
	permanent(isa(t_pacman, X)).

incompossible(s(c_up, X), s(c_down, X)) :-
	permanent(isa(t_pacman, X)).

